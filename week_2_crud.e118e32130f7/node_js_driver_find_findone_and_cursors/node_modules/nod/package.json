{
  "_args": [
    [
      "nod",
      "/Users/DavidsMacBook/Documents/Workspace/Personal_Code/SandBox/MongoDB_101/week_2_crud.e118e32130f7/node_js_driver_find_findone_and_cursors"
    ]
  ],
  "_from": "nod@*",
  "_id": "nod@0.2.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/nod",
  "_npmUser": {
    "email": "paul@cyberstride.net",
    "name": "pvencill"
  },
  "_npmVersion": "1.1.62",
  "_phantomChildren": {},
  "_requested": {
    "name": "nod",
    "raw": "nod",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "http://registry.npmjs.org/nod/-/nod-0.2.0.tgz",
  "_shasum": "aeadadd4e17195bf78a23ce3153b282125b0d6a8",
  "_shrinkwrap": null,
  "_spec": "nod",
  "_where": "/Users/DavidsMacBook/Documents/Workspace/Personal_Code/SandBox/MongoDB_101/week_2_crud.e118e32130f7/node_js_driver_find_findone_and_cursors",
  "author": {
    "name": "Paul Vencill"
  },
  "dependencies": {
    "underscore": "~1.4.3"
  },
  "description": "A simple, persistence-agnostic authorization system for node.js",
  "devDependencies": {
    "mocha": "~1.7.4",
    "should": "~1.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "aeadadd4e17195bf78a23ce3153b282125b0d6a8",
    "tarball": "http://registry.npmjs.org/nod/-/nod-0.2.0.tgz"
  },
  "keywords": [
    "access",
    "authorization",
    "control",
    "node"
  ],
  "license": "BSD",
  "main": "index.js",
  "maintainers": [
    {
      "name": "pvencill",
      "email": "paul.vencill@gmail.com"
    }
  ],
  "name": "nod",
  "optionalDependencies": {},
  "readme": "Nod\n=====\n\nFast, generic, simple access control system for node.js.\n\n## Installation\n\n\t$ npm install nod\n\n## Introduction\n\nnod is used by consuming applications to manage a map of permissions that let you later check or enforce that certain subjects have permissions on specific objects.\n\n### grant\n_grant(subject, resource, permission, [condition])_\n\nSubjects, resources, and permissions can be strings, numbers, objects or arrays.  Strings or numbers will be treated as individual keys where arrays will be treated as a collection of keys to objects.\nIf an object is used, then it must have an id field defined (_id by default, but this can be set through configuration).\nA wildcard string can be used as well to indicate 'all' in any position, but use this sparingly (see revoke).\n\nNote that all the mandatory parameters are pretty arbitrary; nod attaches no semantic meaning to your permission names, nor does it assume any kind of inheritance in this release.\nHowever, resources and permissions will be used as property keys in a javascript object (see getPermissions below), so they must be valid for use as object keys.\n\nThe one optional parameter, condition, is a function that will be called instead of the normal 'check' call when evaluating if a given subject has the specified rights.\nIt has the same signature as check (subject, resource, permission) and should explicitly return true or false to indicate whether access should be granted or not.  Note,\nhowever that it still has to find the condition based on the first three params, so it may be useful to place it with wildcards (see example)\n\n```javascript\n// assuming some object named article\nnod.grant('peter', article.id, 'read');   // peter can read the article with article.id\nnod.grant(['admins','users'], 'article', 'read'); // admins and users can read an article\nnod.grant('admins', 'users', '*'); // admins have all rights to affect users\nnod.grant('*', '*', 'read', function(s,r,p){ return /posts\\/\\d+/.test(r); }); // grants read rights to all users for all resources that pass the regex test\n```\n\n### check or enforce\n_check(subject, resource, permission)_\n_enforce(subject, resource, permission)_\n\n`check` returns true if a subject has a permission on a given resource, and false if it does not.  You can also provide an array of subjects, in which case `check` returns true if *any* of the\nsubjects have that permission on the resource.  This is mostly to allow easy checking of a user's roles against a resource.\n\n`enforce` by contrast calls `check` and then throws an AccessDeniedError if the `check` returns false.\n\nYou can, check peter's rights as follows:\n\n```javascript\nvar peter = {_id : 'peter', roles : ['user', 'contributor']};\nnod.check(peter._id, article.id, 'read'); // returns true\nnod.check(peter._id, article.id, 'write'); // returns false\nnod.enforce(peter._id, article.id', write'); // throws an AccessDeniedError\nnod.check(peter.roles, article.id, 'read');\n```\n\n### revoke\n_revoke(subject, resource, permission)_\n\nIf you later change your mind, you can always `revoke` permissions as well. As with `grant`, you can pass arrays instead of numbers or strings to revoke lists of things\n\n```javascript\nnod.revoke('peter', article.id, 'read');\nnod.revoke('peter',article.id, ['read','write']);\nnod.revoke(['peter','stewie'], article.id, 'read');\n```\n\nNote that wildcards must be revoked as a wildcard.  You cannot successfully grant with a wildcard and then revoke for something more specific:\n\n```javascript\nnod.grant('*', 'articles', 'write');\nnod.revoke('peter', 'articles', write');\nnod.check('peter','articles','write'); // returns true since the wildcard is still in place\n\n// you must remove the wildcard:\nnod.revoke('*','articles','write');\n```\n\n\n### getPermissions\n_getPermissions()_\n\nYou can also view a copy of the permissions map through `getPermissions`\n\n```javascript\nnod.grant('peter', '102029192', 'read');\nnod.getPermissions();\n// returns { '102029192' : { read : {peter : true }}}\n```\n\n### setPermissions\n_setPermissions(obj)_\n\nAnd finally, you can set permissions as well\n\n```javascript\nnod.setPermissions({'102029192' : {read : {peter : true, stewie : true }}});\nnod.check('stewie', '102029192', 'read'); // returns true\n```\n\nNote that setting permissions this way should be done with caution as it just does a bulk overwrite of the current hash.\n\n### Configuration\n\nAt the moment, the only option that does anything is setting the wildcard character (by default, '*').  You do this by calling nod as a function.\n\n```javascript\nvar nod = require('nod');\nnod({ wildcard : '$'});\n```\n",
  "repository": {
    "type": "git",
    "url": "git@github.com:pvencill/nod.git"
  },
  "scripts": {
    "test": "mocha test -r should -R spec"
  },
  "version": "0.2.0"
}
